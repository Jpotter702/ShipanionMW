https://developer.fedex.com/api/en-ag/guides/api-reference.html

https://developer.fedex.com/api/en-ag/catalog/service-availability/v1/docs.html


https://developer.fedex.com/api/en-ag/catalog/track/v1/docs.html

https://developer.fedex.com/api/en-ag/catalog/upload-documents/v1/docs.html


FEDEX_CLIENT_ID = "l77192f306329f4c69b0dfe870c471a3fa"
FEDEX_CLIENT_SECRET = "b4233ce6f89d4fd1a77d070f6d7c773c"
FEDEX_ACCOUNT_NUMBER = "740561111"
FedEx Label Creation Implementation
ShipVox Sprint 6: Label Creation (Augment Onboarding)
Welcome aboard, Augment. You're taking over Sprint 6 of the ShipVox backend â€” the core mission is to implement carrier label creation, starting with FedEx.

ðŸŽ¯ Goal
Create a full label generation pipeline for FedEx shipments, optionally fallback to QR generation, and return a structured label response via API.

âœ… Whatâ€™s Already Scaffolded
models/label_request.py â€“ incoming request model

models/label_response.py â€“ expected response format

labels/label_creator.py â€“ dispatches to FedEx/UPS engines, handles fallback QR logic

labels/qr_generator.py â€“ creates QR from label_url

app/routes/labels.py â€“ defines /labels POST route

ðŸ“¦ What Youâ€™re Doing
Implement the logic in:

labels/fedex_ship.py â€“ use FedEx Ship API (sandbox)

Extract tracking number and base64 PDF label

Save PDF as static file (or return as base64)

If FedEx returns a native QR code, attach it

labels/ups_ship.py â€“ stubbed only (use test data or skip)

Return LabelResponse

If FedEx does not provide a native QR code, the system auto-generates one from the label URL using qr_generator.py.

ðŸ§ª Done =
Calling POST /labels with a valid request returns a working test label

QR path is present (native or fallback)

Ready for integration with frontend or voice agent

Ping Cherry for clarification or refer to the stubbed files to guide your implementation.

Letâ€™s get those labels shipping. ðŸ“¦ðŸ”¥

Augment
I'll help you implement the FedEx label creation functionality for ShipVox Sprint 6. Let's start by exploring the codebase to understand the current structure and requirements.

Initial Information Gathering
Let's first look at the existing models and routes to understand the expected input and output formats.

Augment Context Engine
Show me the models/label_request.py and models/label_response.py files to understand the input and output structures
Now, let's look at the label creator and the FedEx ship module to understand what needs to be implemented:

Augment Context Engine
Show me the FedEx authentication module and any FedEx API integration code that might exist in the codebase
Let's also check if there are any existing tests for the label creation functionality:

Augment Context Engine
Show me any test files related to label creation or FedEx shipping
Let's also check for any FedEx API documentation that might be available in the codebase:

Augment Context Engine
Show me any FedEx API documentation or examples related to shipping or label creation
Let's check for any additional information about the static files directory structure:

Augment Context Engine
Show me information about the static files directory structure, especially related to where labels should be stored
Now, let's check for any existing environment variables or configuration that might be needed for the FedEx API:

Augment Context Engine
Show me any environment variable configuration or .env file examples in the codebase
Let's also check for any existing tests for the label creation functionality:

Augment Context Engine
Show me any test files or examples related to label creation or testing the label endpoints
Based on the information gathered, I'll now create a detailed plan for implementing the FedEx label creation functionality.

Detailed Plan for FedEx Label Creation Implementation
After reviewing the codebase, I understand that I need to implement the FedEx label creation functionality in the labels/fedex_ship.py file. The implementation should use the FedEx Ship API to generate shipping labels and return a structured response.

Here's my detailed plan:

1. Implement the FedEx Ship Engine
I'll update the FedExShipEngine class in labels/fedex_ship.py to:

Use the FedEx authentication module to get an access token
Prepare and send a request to the FedEx Ship API
Process the response to extract the tracking number and label data
Save the label PDF to the static files directory
Check for native QR code in the response
Return a properly formatted LabelResponse object
2. Update the Label Creator
The LabelCreator class in labels/label_creator.py is already set up to handle the label creation flow, including fallback QR code generation. I'll ensure it works correctly with the updated FedEx implementation.

3. Ensure Static Files Directory Structure
I'll make sure the static files directory structure exists for storing labels and QR codes:

static/labels/ - For storing label PDFs
static/labels/qr/ - For storing QR codes
4. Update the API Routes
The API route for label creation is already defined in app/routes/labels.py. I'll ensure it's properly included in the FastAPI app.

5. Test the Implementation
I'll create a test script to verify the label creation functionality works correctly.

Let's start implementing this plan:

Implementation
First, let's implement the FedEx Ship Engine:

Read file
fedex_ship.py
labels
Let's check the models to understand the input and output structures:

Read file
label_request.py
models
Read file
label_response.py
models
Read file
shipping.py
models
I need to check if there are any AddressModel and PackageModel classes:

Augment Context Engine
Show me the AddressModel and PackageModel classes referenced in models/label_request.py
Now I need to check if there are any AddressModel and PackageModel classes specifically:

Augment Context Engine
Find any references to AddressModel and PackageModel in the codebase
I need to check if there are any type aliases for AddressModel and PackageModel:

Read file
__init__.py
models
Let's check if there are any type aliases defined in the codebase:

Augment Context Engine
Find any type aliases or imports for AddressModel and PackageModel in the codebase
Based on the information gathered, it seems that AddressModel and PackageModel are referenced in models/label_request.py but not defined anywhere. It's likely that they should be the Address and Package classes from models/shipping.py.

Let's update the models/__init__.py file to define these type aliases:

Edited file
__init__.py
models
Now, let's implement the FedEx Ship Engine:

Edited file
fedex_ship.py
labels
Let's fix the deprecated dict() method warnings by updating to use model_dump() instead, and remove the unused import:

Edited file
fedex_ship.py
labels
Now, let's update the app's main.py file to include the labels router:

Read file
main.py
app
Let's update the main.py file to include the labels router:

Edited file
main.py
app
Now, let's create a test script to verify the label creation functionality:

Created file
test_fedex_label.py
Let's also create a test script to verify the label API endpoint:

Created file
test_label_api.py
Let's make sure the static directories exist:

Terminal
$ mkdir -p static/labels/qr
Now, let's run the application to test the label creation functionality:

Terminal
$ python run.py
Let's wait a moment for the server to start up:

Terminal
Read from Process
We need to fix the import error. Let's kill the current process and update the label_request.py file:

Terminal
Killed Process
Let's update the label_request.py file to use the correct imports:

Edited file
label_request.py
models
Now let's run the application again:

Terminal
$ python run.py
Let's wait a moment for the server to start up:

Terminal
Read from Process
We need to install the qrcode package:

Terminal
Killed Process
Let's install the qrcode package:

Terminal
$ pip install qrcode[pil]
Now let's run the application again:

Terminal
$ python run.py
Let's wait a moment for the server to start up:

Terminal
Read from Process
Great! The server is now running. Let's test the FedEx label creation functionality directly:

Terminal
$ python test_fedex_label.py
We need to fix the FedEx ship request by adding the missing labelResponseOptions field. Let's update the FedEx ship engine:

Edited file
fedex_ship.py
labels
We also need to update the label extraction method to handle URL-based responses:

Edited file
fedex_ship.py
labels
Let's test the FedEx label creation functionality again:

Terminal
$ python test_fedex_label.py
Let's update the FedEx ship engine to better handle the response and print more debugging information:

Edited file
fedex_ship.py
labels
Let's add the missing import:

Edited file
fedex_ship.py
labels
Let's test the FedEx label creation functionality again:

Terminal
$ python test_fedex_label.py
We need to update the label extraction method to handle the encoded label in the response:

Edited file
fedex_ship.py
labels
Let's test the FedEx label creation functionality again:

Terminal
$ python test_fedex_label.py
Great! The FedEx label creation functionality is now working. Let's test the API endpoint:

Terminal
$ python test_label_api.py
Excellent! The label API endpoint is also working correctly. Let's kill the server process:

Terminal
Killed Process
Summary
We have successfully implemented the FedEx label creation functionality for ShipVox Sprint 6. Here's a summary of what we accomplished:

Implemented the FedExShipEngine class in labels/fedex_ship.py to:
Authenticate with the FedEx API
Prepare and send a ship request
Process the response to extract tracking number and label data
Save the label PDF to the static files directory
Handle QR code extraction or fallback generation
Updated the application to include the labels router and mount the static files directory.
Created test scripts to verify the functionality:
test_fedex_label.py - Tests the FedEx label creation directly
test_label_api.py - Tests the label API endpoint
Fixed various issues along the way:
Added missing imports
Updated the model imports
Fixed the label extraction logic to handle different response formats
Added proper error handling
The implementation now successfully:

Creates a shipping label using the FedEx Ship API
Extracts the tracking number and label data
Saves the label as a PDF file
Generates a fallback QR code if needed
Returns a structured response with all required information
This completes the core requirements for Sprint 6, providing a working label creation pipeline for FedEx shipments.